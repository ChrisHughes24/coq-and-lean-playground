import category_theory.adjunction.basic
import category_theory.limits.has_limits
import data.pfun

open category_theory category_theory.functor category_theory.limits
universes u v
variables (ùíû : Type) [category.{0} ùíû]

inductive bicompletion_aux : bool ‚Üí Type 1
| of_cat_obj : ùíû ‚Üí bicompletion_aux ff
| limit_obj {D : Type} (F : D ‚Üí bicompletion_aux tt) : bicompletion_aux ff
| colimit_obj {D : Type} (F : D ‚Üí bicompletion_aux tt) : bicompletion_aux ff
| of_cat_hom : Œ† {X Y : ùíû}, (X ‚ü∂ Y) ‚Üí bicompletion_aux tt -- of_cat_obj X ‚ü∂ of_cat_obj Y
| limit_cone_comp {D : Type} (F : D ‚Üí bicompletion_aux tt) 
  (X : D) (Y : bicompletion_aux ff) (f : bicompletion_aux tt) : -- F_obj X ‚ü∂ Y
  bicompletion_aux tt -- limit_obj F ‚ü∂ Y
| colimit_cocone_comp {D : Type} (F : D ‚Üí bicompletion_aux tt)  
  (X : D) (Y : bicompletion_aux ff) (f : bicompletion_aux tt) : -- Y ‚ü∂ F_obj X
  bicompletion_aux tt -- Y ‚ü∂ colimit_obj F
| is_limit {D : Type} (F : D ‚Üí bicompletion_aux tt) 
  (cone_obj : bicompletion_aux ff)
  (cone : Œ† (X : D), bicompletion_aux tt) : -- cone_obj ‚ü∂ F_obj X
  bicompletion_aux tt -- cone_obj ‚Üí limit_obj F
| is_colimit {D : Type} (F : D ‚Üí bicompletion_aux tt) 
  (cocone_obj : bicompletion_aux ff)
  (cocone : Œ† (X : D), bicompletion_aux tt) : -- F_obj X ‚ü∂ cocone_obj
  bicompletion_aux tt -- colimit_obj F ‚ü∂ cocone_obj
| id (X : bicompletion_aux ff) : bicompletion_aux tt -- X ‚ü∂ X

namespace bicompletion_aux

variable {ùíû}

@[simp] def dom : Œ† (X : bicompletion_aux ùíû tt), bicompletion_aux ùíû ff
| (@of_cat_hom _ _ X Y f) := of_cat_obj X 
| (@limit_cone_comp _ _ _ F _ _ _) := by exactI limit_obj F
| (@is_limit _ _ _ _ cone_obj _) := cone_obj
| (@colimit_cocone_comp _ _ _ _ X Y f) := Y
| (@is_colimit _ _ _ F cocone_obj cocone) := by exactI colimit_obj F
| (id X) := X

@[simp] def cod : Œ† (X : bicompletion_aux ùíû tt), bicompletion_aux ùíû ff
| (@of_cat_hom _ _ X Y f) := of_cat_obj Y 
| (@colimit_cocone_comp _ _ ùíü F X _ _) := by exactI colimit_obj F
| (@is_colimit _ _ ùíü F cocone_obj cocone) := cocone_obj
| (@limit_cone_comp _ _ ùíü F X Y f) := Y
| (@is_limit _ _ ùíü F cone_obj cone) := by exactI limit_obj F
| (id X) := X

open sum

inductive valid : bicompletion_aux ùíû ff ‚äï bicompletion_aux ùíû tt ‚Üí Type 1
| of_cat_obj : Œ† (X : ùíû), valid (inl (of_cat_obj X))
| limit_obj {D : Type} (F : D ‚Üí bicompletion_aux ùíû tt) (hF : Œ† (X : D), valid (inr (F X))) :
    valid (inl (limit_obj F))
| colimit_obj {D : Type} (F : D ‚Üí bicompletion_aux ùíû tt) (hF : Œ† (X : D), valid (inr (F X))) :
    valid (inl (colimit_obj F))
| limit_cone_comp {D : Type} (F : D ‚Üí bicompletion_aux ùíû tt)
  (hF : Œ† (X : D), valid (inr (F X))) 
  (X : D) (Y : bicompletion_aux ùíû ff) 
  (hY : valid (inl Y))
  (f : bicompletion_aux ùíû tt) 
  (hf : valid (inr f))
  (hfd : f.dom = (F X).dom)
  (hfc : f.cod = Y)

  : -- F_obj X ‚ü∂ Y
  bicompletion_aux tt -- limit_obj F ‚ü∂ Y

variable (ùíû)

def obj‚ÇÅ : Type 1 := bicompletion_aux ùíû ff

variable {ùíû}
variables {D : Type} [category.{0} ùíü]

def hom‚ÇÅ (X Y : obj‚ÇÅ ùíû) : Type 1 :=
{ f : bicompletion_aux ùíû tt // f.dom = X ‚àß f.cod = Y }

@[simp] lemma coe_dom {X Y : obj‚ÇÅ ùíû} (f : hom‚ÇÅ X Y) :
  (@coe { f : bicompletion_aux ùíû tt // f.dom = X ‚àß f.cod = Y } 
    (bicompletion_aux ùíû tt) _ f).dom = X := f.2.1

@[simp] lemma coe_cod {X Y : obj‚ÇÅ ùíû} (f : hom‚ÇÅ X Y) :
  (@coe { f : bicompletion_aux ùíû tt // f.dom = X ‚àß f.cod = Y } 
    (bicompletion_aux ùíû tt) _ f).cod = Y := f.2.2

def of_cat_obj‚ÇÅ (X : ùíû) : obj‚ÇÅ ùíû := of_cat_obj X

def limit_obj‚ÇÅ (F_obj : ùíü ‚Üí obj‚ÇÅ ùíû) 
  (F_hom : Œ† {X Y : ùíü}, (X ‚ü∂ Y) ‚Üí hom‚ÇÅ (F_obj X) (F_obj Y)) : obj‚ÇÅ ùíû :=
limit_obj _

def colimit_obj‚ÇÅ (F_obj : ùíü ‚Üí obj‚ÇÅ ùíû) 
  (F_hom : Œ† {X Y : ùíü}, (X ‚ü∂ Y) ‚Üí hom‚ÇÅ (F_obj X) (F_obj Y)) : obj‚ÇÅ ùíû :=
colimit_obj F_obj (Œª X Y f, (F_hom f).1)

def of_cat_hom‚ÇÅ {X Y : ùíû} (f : X ‚ü∂ Y) : hom‚ÇÅ (of_cat_obj X) (of_cat_obj Y) :=
‚ü®of_cat_hom f, by simp‚ü©

def limit_cone_comp‚ÇÅ (F_obj : ùíü ‚Üí obj‚ÇÅ ùíû)
  (F_hom : Œ† {X Y : ùíü}, (X ‚ü∂ Y) ‚Üí hom‚ÇÅ (F_obj X) (F_obj Y)) (X : ùíü) 
  {Y : obj‚ÇÅ ùíû} (f : hom‚ÇÅ (F_obj X) Y) :
  hom‚ÇÅ (limit_obj‚ÇÅ F_obj @F_hom) Y :=
‚ü®limit_cone_comp F_obj (Œª X Y f, (F_hom f).1) X Y f.1, by simp [limit_obj‚ÇÅ]‚ü©

def colimit_cocone_comp‚ÇÅ (F_obj : ùíü ‚Üí obj‚ÇÅ ùíû)
  (F_hom : Œ† {X Y : ùíü}, (X ‚ü∂ Y) ‚Üí hom‚ÇÅ (F_obj X) (F_obj Y)) (X : ùíü) 
  {Y : obj‚ÇÅ ùíû} (f : hom‚ÇÅ Y (F_obj X)) :
  hom‚ÇÅ Y (colimit_obj‚ÇÅ F_obj @F_hom) :=
‚ü®colimit_cocone_comp F_obj (Œª X Y f, (F_hom f).1) X Y f.1, by simp [colimit_obj‚ÇÅ]‚ü©

def is_limit‚ÇÅ (F_obj : ùíü ‚Üí obj‚ÇÅ ùíû) 
  (F_hom : Œ† {X Y : ùíü}, (X ‚ü∂ Y) ‚Üí hom‚ÇÅ (F_obj X) (F_obj Y))
  (cone_obj : obj‚ÇÅ ùíû)
  (cone : Œ† (X : ùíü), hom‚ÇÅ cone_obj (F_obj X)) :
  hom‚ÇÅ cone_obj (limit_obj‚ÇÅ F_obj @F_hom) :=
‚ü®is_limit F_obj (Œª X Y f, (F_hom f).1) cone_obj (Œª X, (cone X).1), by simp [limit_obj‚ÇÅ]‚ü©

def is_colimit‚ÇÅ (F_obj : ùíü ‚Üí obj‚ÇÅ ùíû) 
  (F_hom : Œ† {X Y : ùíü}, (X ‚ü∂ Y) ‚Üí hom‚ÇÅ (F_obj X) (F_obj Y))
  (cocone_obj : obj‚ÇÅ ùíû)
  (cocone : Œ† (X : ùíü), hom‚ÇÅ (F_obj X) cocone_obj) :
  hom‚ÇÅ (colimit_obj‚ÇÅ F_obj @F_hom) cocone_obj  :=
‚ü®is_colimit F_obj (Œª X Y f, (F_hom f).1) cocone_obj (Œª X, (cocone X).1), by simp [colimit_obj‚ÇÅ]‚ü©

def id‚ÇÅ (X : obj‚ÇÅ ùíû) : hom‚ÇÅ X X := ‚ü®id X, rfl, rfl‚ü©

@[elab_as_eliminator] def bicompletion_tt_rec_on 
  {motive : bicompletion_aux ùíû tt ‚Üí Sort u} 
  (f : bicompletion_aux ùíû tt)
  (of_cat_hom : Œ† {X Y : ùíû} (f : X ‚ü∂ Y), motive (of_cat_hom f))
  (limit_cone_comp : Œ† {ùíü : Type} [category ùíü] (F_obj : ùíü ‚Üí bicompletion_aux ùíû ff)
    (F_hom : Œ† {X Y : ùíü}, (by exactI X ‚ü∂ Y) ‚Üí bicompletion_aux ùíû tt) (X : ùíü) (Y : bicompletion_aux ùíû ff)
    (f : bicompletion_aux ùíû tt)
    (ih : Œ† {X Y : ùíü} (f : by exactI X ‚ü∂ Y), motive (F_hom f)),
      motive f ‚Üí by exactI motive (limit_cone_comp F_obj @F_hom X Y f))
  (colimit_cone_comp : Œ† {ùíü : Type} [category ùíü] (F_obj : ùíü ‚Üí bicompletion_aux ùíû ff)
    (F_hom : Œ† {X Y : ùíü}, (by exactI X ‚ü∂ Y) ‚Üí bicompletion_aux ùíû tt) (X : ùíü) (Y : bicompletion_aux ùíû ff)
    (f : bicompletion_aux ùíû tt)
    (ih : Œ† {X Y : ùíü} (f : by exactI X ‚ü∂ Y), motive (F_hom f)),
      motive f ‚Üí by exactI motive (colimit_cocone_comp F_obj @F_hom X Y f))
  (is_limit : Œ† {ùíü : Type} [_inst_2 : category ùíü] (F_obj : ùíü ‚Üí bicompletion_aux ùíû ff)
    (F_hom : Œ† {X Y : ùíü}, (by exactI X ‚ü∂ Y) ‚Üí bicompletion_aux ùíû tt) (cone_obj : bicompletion_aux ùíû ff)
    (cone : ùíü ‚Üí bicompletion_aux ùíû tt)
    (ih_F_hom : Œ† {X Y : ùíü} (f : by exactI X ‚ü∂ Y), motive (F_hom f))
    (ih_cone : Œ† (X : ùíü), motive (cone X)), 
    by exactI motive (is_limit F_obj @F_hom cone_obj cone))
  (is_colimit : Œ† {ùíü : Type} [_inst_2 : category ùíü] (F_obj : ùíü ‚Üí bicompletion_aux ùíû ff)
    (F_hom : Œ† {X Y : ùíü}, (by exactI X ‚ü∂ Y) ‚Üí bicompletion_aux ùíû tt) (cone_obj : bicompletion_aux ùíû ff)
    (cone : ùíü ‚Üí bicompletion_aux ùíû tt)
    (ih_F_hom : Œ† {X Y : ùíü} (f : by exactI X ‚ü∂ Y), motive (F_hom f))
    (ih_cone : Œ† (X : ùíü), motive (cone X)), 
    by exactI motive (is_colimit F_obj @F_hom cone_obj cone))
  (id : Œ† (X : bicompletion_aux ùíû ff), motive X.id) :
  motive f := sorry

def comp‚ÇÅ (f : bicompletion_aux ùíû tt) : bicompletion_aux ùíû tt ‚Üí part (bicompletion_aux ùíû tt) :=
bicompletion_tt_rec_on f 
  begin
    intros X Y f g,
    refine bicompletion_tt_rec_on g _ _ _ _ _ _,
    { intros B C g,
      exact ‚ü®Y = B, Œª h, by subst h; exact of_cat_hom (f ‚â´ g)‚ü© },
    { intros, exact part.none },
    { introsI ùíü _ F_obj F_hom A B g ih‚ÇÅ ih‚ÇÇ,
      exact ih‚ÇÇ >>= Œª ih‚ÇÇ, return (colimit_cocone_comp F_obj @F_hom A B ih‚ÇÇ) },
    { introsI ùíü _ F_obj F_hom A cone ih‚ÇÅ ih‚ÇÇ,  
      exact ‚ü®‚àÄ (X : ùíü), (ih‚ÇÇ X).dom, Œª h, is_limit F_obj @F_hom (of_cat_obj X) (Œª X, (ih‚ÇÇ X).get (h X))‚ü© },
    { intros, exact part.none },
    { intros, exact return (of_cat_hom f) }
  end  
  begin
    introsI ùíü _ F_obj F_hom A B f _ ih‚ÇÇ g,
    exact ih‚ÇÇ g >>= Œª ih‚ÇÇ, return (limit_cone_comp F_obj @F_hom A B ih‚ÇÇ)
  end
  begin
    introsI ùíü _ F_obj F_hom A B f ih‚ÇÅ ih‚ÇÇ g,
    revert ih‚ÇÇ A,
    refine bicompletion_tt_rec_on g _ _ _ _ _ _,
    { intros, exact part.none },
    { intros, exact part.none },
    { introsI ‚Ñ∞ _ G_obj G_hom C Y g ih‚ÇÉ ih‚ÇÑ ih‚ÇÇ A,
      exact ih‚ÇÑ ih‚ÇÇ A >>= Œª ih‚ÇÑ, return (colimit_cocone_comp G_obj @G_hom C Y ih‚ÇÑ) },
    { introsI ‚Ñ∞ _ G_obj G_hom _ g ih‚ÇÉ ih‚ÇÑ ih‚ÇÇ A,
      exact ‚ü®Œ† (X : ‚Ñ∞), (ih‚ÇÑ X ih‚ÇÇ A).dom, 
        Œª h, is_limit G_obj @G_hom B (Œª X, (ih‚ÇÑ X ih‚ÇÇ A).get (h X))‚ü© },
    { introsI ‚Ñ∞ _ G_obj G_hom cocone_obj cocone _ g ih‚ÇÇ A,
      exact ih‚ÇÇ (cocone A) },
    { intros A f _,
      exact colimit_cocone_comp‚ÇÇ F_obj @F_hom A f }
  end
  _ _ (Œª _, return)
  -- begin
  --   introsI ùíü _ F_obj F_hom ih‚ÇÅ cone_obj cone ih‚ÇÇ Z g,
  --   revert ih‚ÇÇ,
  --   refine hom‚ÇÇ_limit_obj_rec_on g _ _ _ _,
  --   { introsI ‚Ñ∞ _ G_obj G_hom A B g ih‚ÇÇ,
  --     exact ih‚ÇÇ A g },
  --   { introsI ‚Ñ∞ _ F_obj F_hom A ‚Ñ± _ G_obj G_hom g ih‚ÇÉ ih‚ÇÇ,
  --     exact colimit_cocone_comp‚ÇÇ F_obj @F_hom A (ih‚ÇÉ @ih‚ÇÇ) },
  --   { introsI ‚Ñ∞ _ F_obj F_hom ‚Ñ± _ G_obj G_hom ih‚ÇÉ ih‚ÇÑ ih‚ÇÇ,
  --     exact is_limit‚ÇÇ F_obj @F_hom cone_obj (Œª X, ih‚ÇÑ _ @ih‚ÇÇ) },
  --   { introsI ih,
  --     exact is_limit‚ÇÇ F_obj @F_hom cone_obj cone }
  -- end
  -- begin
  --   introsI ùíü _ F_obj F_hom ih‚ÇÅ cocone_obj cocone ih‚ÇÇ Z g,
  --   exact is_colimit‚ÇÇ F_obj @F_hom Z (Œª A, ih‚ÇÇ A g)
  -- end
  -- (Œª _ _ g, g)

inductive valid_obj‚ÇÅ : Œ† (X : obj‚ÇÅ ùíû), Prop
| of_cat_obj (X : ùíû) : valid_obj‚ÇÅ (of_cat_obj X)
| limit_obj {ùíü : Type} [category.{0} ùíü] (F_obj : ùíü ‚Üí obj‚ÇÅ ùíû) 
  (F_hom : Œ† {X Y : ùíü}, (X ‚ü∂ Y) ‚Üí hom‚ÇÅ (F_obj X) (F_obj Y)) 
  (h : Œ† X : ùíü, valid_obj‚ÇÅ (F_obj X)) : 
  valid_obj‚ÇÅ (limit_obj‚ÇÅ F_obj @F_hom)
| colimit_obj {ùíü : Type} [category.{0} ùíü] (F_obj : ùíü ‚Üí obj‚ÇÅ ùíû)
  (F_hom : Œ† {X Y : ùíü}, (X ‚ü∂ Y) ‚Üí hom‚ÇÅ (F_obj X) (F_obj Y))
  (h : Œ† X : ùíü, valid_obj‚ÇÅ (F_obj X)) :
  valid_obj‚ÇÅ (colimit_obj‚ÇÅ F_obj @F_hom)

def valid_obj‚ÇÅ_limit_obj 
  {ùíü : Type} [category.{0} ùíü] {F_obj : ùíü ‚Üí obj‚ÇÅ ùíû}
  {F_hom : Œ† {X Y : ùíü}, (X ‚ü∂ Y) ‚Üí bicompletion_aux ùíû tt}
  (h : valid_obj‚ÇÅ (limit_obj F_obj @F_hom)) :
  Œ† (X : ùíü), valid_obj‚ÇÅ (F_obj X) :=
begin
  generalize hX : limit_obj F_obj @F_hom = X,
  rw hX at h,
  induction h,
  { simp * at * },
  { simp [limit_obj‚ÇÅ] at hX,
    rcases hX with ‚ü®hX‚ÇÅ, hX‚ÇÇ, hX‚ÇÇ, hX‚ÇÑ‚ü©,
    subst hX‚ÇÅ,
    simp at *,
    subst hX‚ÇÇ,
    assumption },
  { simp [*, colimit_obj‚ÇÅ] at * }
end

def valid_obj‚ÇÅ_colimit_obj 
  {ùíü : Type} [category.{0} ùíü] {F_obj : ùíü ‚Üí obj‚ÇÅ ùíû}
  {F_hom : Œ† {X Y : ùíü}, (X ‚ü∂ Y) ‚Üí bicompletion_aux ùíû tt}
  (h : valid_obj‚ÇÅ (colimit_obj F_obj @F_hom)) :
  Œ† (X : ùíü), valid_obj‚ÇÅ (F_obj X) :=
begin
  generalize hX : colimit_obj F_obj @F_hom = X,
  rw hX at h,
  induction h,
  { simp * at * },
  { simp [*, limit_obj‚ÇÅ] at * },
  { simp [colimit_obj‚ÇÅ] at hX,
    rcases hX with ‚ü®hX‚ÇÅ, hX‚ÇÇ, hX‚ÇÇ, hX‚ÇÑ‚ü©,
    subst hX‚ÇÅ,
    simp at *,
    subst hX‚ÇÇ,
    assumption }
end

@[elab_as_eliminator] def hom_rec_on {motive : bicompletion_aux ùíû tt ‚Üí Sort u}
  (f : bicompletion_aux ùíû tt)
  (of_cat_hom : Œ† {X Y : ùíû} (f : X ‚ü∂ Y), motive (of_cat_hom f))
  (limit_cone_comp : Œ† {ùíü : Type} [category.{0} ùíü] (F_obj : ùíü ‚Üí bicompletion_aux ùíû ff)
    (F_hom : Œ† {X Y : ùíü}, (by exactI X ‚ü∂ Y) ‚Üí bicompletion_aux ùíû tt) (X : ùíü) (Y : bicompletion_aux ùíû ff)
    (f : bicompletion_aux ùíû tt),
    (Œ† {X Y : ùíü} (f : by exactI X ‚ü∂ Y), motive (F_hom f)) ‚Üí
    motive f ‚Üí motive (by exactI limit_cone_comp F_obj @F_hom X Y f))
  (is_limit : Œ† {ùíü : Type} [category.{0} ùíü] (F_obj : ùíü ‚Üí bicompletion_aux ùíû ff)
    (F_hom : Œ† {X Y : ùíü}, (by exactI X ‚ü∂ Y) ‚Üí bicompletion_aux ùíû tt) (cone_obj : bicompletion_aux ùíû ff)
    (cone : ùíü ‚Üí bicompletion_aux ùíû tt),
    (Œ† {X Y : ùíü} (f : by exactI X ‚ü∂ Y), motive (F_hom f)) ‚Üí
    (Œ† (X : ùíü), motive (cone X)) ‚Üí motive (by exactI is_limit F_obj @F_hom cone_obj cone))
  (colimit_cocone_comp : Œ† {ùíü : Type} [category.{0} ùíü] (F_obj : ùíü ‚Üí bicompletion_aux ùíû ff)
    (F_hom : Œ† {X Y : ùíü}, (by exactI X ‚ü∂ Y) ‚Üí bicompletion_aux ùíû tt) (X : ùíü) (Y : bicompletion_aux ùíû ff)
    (f : bicompletion_aux ùíû tt),
    (Œ† {X Y : ùíü} (f : by exactI X ‚ü∂ Y), motive (F_hom f)) ‚Üí
    motive f ‚Üí motive (by exactI colimit_cocone_comp F_obj @F_hom X Y f))
  (is_colimit : Œ† {ùíü : Type} [category.{0} ùíü] (F_obj : ùíü ‚Üí bicompletion_aux ùíû ff)
   (F_hom : Œ† {X Y : ùíü}, (by exactI X ‚ü∂ Y) ‚Üí bicompletion_aux ùíû tt) (cocone_obj : bicompletion_aux ùíû ff)
   (cocone : ùíü ‚Üí bicompletion_aux ùíû tt),
     (Œ† {X Y : ùíü} (f : by exactI X ‚ü∂ Y), motive (F_hom f)) ‚Üí
     (Œ† (X : ùíü), motive (cocone X)) ‚Üí motive (by exactI is_colimit F_obj @F_hom cocone_obj cocone))
  (id : Œ† (X : obj‚ÇÅ ùíû), motive (id X)) :
  motive f :=
have ‚àÄ b (f : bicompletion_aux ùíû b) (h : b = tt), motive (eq.rec_on h f) :=
  begin
    intros b f,
    refine bicompletion_aux.rec_on f _ _ _ _ _ _ _ _ _,
    { intros, simp at *, contradiction },
    { intros, simp at *, contradiction },
    { intros, simp at *, contradiction },
    { intros X Y f _,
      exact of_cat_hom f },
    { introsI ùíü _ F_obj F_hom X Y f ih‚ÇÅ ih‚ÇÇ ih‚ÇÉ ih‚ÇÑ _,
      exact limit_cone_comp F_obj @F_hom X Y f (Œª X Y f, ih‚ÇÇ f rfl) (ih‚ÇÑ rfl) },
    { introsI ùíü _ F_obj F_hom X Y f ih‚ÇÅ ih‚ÇÇ ih‚ÇÉ ih‚ÇÑ _,
      exact colimit_cocone_comp F_obj @F_hom X Y f (Œª X Y f, ih‚ÇÇ f rfl) (ih‚ÇÑ rfl) },
    { introsI ùíü _ F_obj F_hom cone_obj cone ih‚ÇÅ ih‚ÇÇ ih‚ÇÉ ih‚ÇÑ _,
      exact is_limit F_obj @F_hom cone_obj cone (Œª X Y f, ih‚ÇÇ f rfl) (Œª X, ih‚ÇÑ X rfl) },
    { introsI ùíü _ F_obj F_hom cone_obj cone ih‚ÇÅ ih‚ÇÇ ih‚ÇÉ ih‚ÇÑ _,
      exact is_colimit F_obj @F_hom cone_obj cone (Œª X Y f, ih‚ÇÇ f rfl) (Œª X, ih‚ÇÑ X rfl) },
    { intros X _ _, exact id X }
  end,
this tt f rfl

inductive valid_hom‚ÇÅ : Œ† {X Y : obj‚ÇÅ ùíû}, hom‚ÇÅ X Y ‚Üí Prop
| of_cat_hom {X Y : ùíû} (f : X ‚ü∂ Y) : valid_hom‚ÇÅ (of_cat_hom‚ÇÅ f)
| id (X : obj‚ÇÅ ùíû) : valid_hom‚ÇÅ (id‚ÇÅ X)
| limit_cone_comp {ùíü : Type} [category.{0} ùíü] (F_obj : ùíü ‚Üí obj‚ÇÅ ùíû)
  (obj_valid : ‚àÄ X, valid_obj‚ÇÅ (F_obj X))
  (F_hom : Œ† {X Y : ùíü}, (X ‚ü∂ Y) ‚Üí hom‚ÇÅ (F_obj X) (F_obj Y)) 
  (X : ùíü) {Y : obj‚ÇÅ ùíû} (f : hom‚ÇÅ (F_obj X) Y) 
  (F_hom_valid : Œ† {X Y : ùíü} (f : X ‚ü∂ Y), valid_hom‚ÇÅ (F_hom f))
  (f_valid : valid_hom‚ÇÅ f) :
  valid_hom‚ÇÅ (limit_cone_comp‚ÇÅ F_obj @F_hom X f)
| colimit_cocone_comp {ùíü : Type} [category.{0} ùíü] (F_obj : ùíü ‚Üí obj‚ÇÅ ùíû)
  (obj_valid : ‚àÄ X, valid_obj‚ÇÅ (F_obj X))
  (F_hom : Œ† {X Y : ùíü}, (X ‚ü∂ Y) ‚Üí hom‚ÇÅ (F_obj X) (F_obj Y)) 
  (X : ùíü) {Y : obj‚ÇÅ ùíû} (f : hom‚ÇÅ Y (F_obj X)) 
  (F_hom_valid : Œ† {X Y : ùíü} (f : X ‚ü∂ Y), valid_hom‚ÇÅ (F_hom f))
  (f_valid : valid_hom‚ÇÅ f) :
  valid_hom‚ÇÅ (colimit_cocone_comp‚ÇÅ F_obj @F_hom X f)
| is_limit {ùíü : Type} [category.{0} ùíü] (F_obj : ùíü ‚Üí obj‚ÇÅ ùíû)
  (obj_valid : ‚àÄ X, valid_obj‚ÇÅ (F_obj X))
  (F_hom : Œ† {X Y : ùíü}, (X ‚ü∂ Y) ‚Üí hom‚ÇÅ (F_obj X) (F_obj Y))
  (cone_obj : obj‚ÇÅ ùíû)
  (cone : Œ† (X : ùíü), hom‚ÇÅ cone_obj (F_obj X)) 
  (F_hom_valid : Œ† {X Y : ùíü} (f : X ‚ü∂ Y), valid_hom‚ÇÅ (F_hom f))
  (cone_valid : Œ† (X : ùíü), valid_hom‚ÇÅ (cone X)) :
  valid_hom‚ÇÅ (is_limit‚ÇÅ F_obj @F_hom cone_obj cone)
| is_colimit {ùíü : Type} [category.{0} ùíü] (F_obj : ùíü ‚Üí obj‚ÇÅ ùíû)
  (obj_valid : ‚àÄ X, valid_obj‚ÇÅ (F_obj X))
  (F_hom : Œ† {X Y : ùíü}, (X ‚ü∂ Y) ‚Üí hom‚ÇÅ (F_obj X) (F_obj Y))
  (cocone_obj : obj‚ÇÅ ùíû)
  (cocone : Œ† (X : ùíü), hom‚ÇÅ (F_obj X) cocone_obj) 
  (F_hom_valid : Œ† {X Y : ùíü} (f : X ‚ü∂ Y), valid_hom‚ÇÅ (F_hom f))
  (cocone_valid : Œ† (X : ùíü), valid_hom‚ÇÅ (cocone X)) :
  valid_hom‚ÇÅ (is_colimit‚ÇÅ F_obj @F_hom cocone_obj cocone)

variable (ùíû)

def obj‚ÇÇ : Type 1 := { X : obj‚ÇÅ ùíû // valid_obj‚ÇÅ X } 

variable {ùíû}

def hom‚ÇÇ (X Y : obj‚ÇÇ ùíû) : Type 1 := { f : hom‚ÇÅ X.1 Y.1 // valid_hom‚ÇÅ f }

open valid_hom‚ÇÅ

def of_cat_obj‚ÇÇ (X : ùíû) : obj‚ÇÇ ùíû :=
‚ü®of_cat_obj X, valid_obj‚ÇÅ.of_cat_obj _‚ü© 

lemma of_cat_obj‚ÇÇ_injective : function.injective (@of_cat_obj‚ÇÇ ùíû _) :=
begin
  intros X Y hXY,
  simp [of_cat_obj‚ÇÇ] at hXY,
  injection hXY,
end

def limit_obj‚ÇÇ (F_obj : ùíü ‚Üí obj‚ÇÇ ùíû) 
  (F_hom : Œ† {X Y : ùíü}, (X ‚ü∂ Y) ‚Üí hom‚ÇÇ (F_obj X) (F_obj Y)) : obj‚ÇÇ ùíû :=
‚ü®limit_obj‚ÇÅ (Œª X, (F_obj X).1) (Œª X Y f, (F_hom f).1), valid_obj‚ÇÅ.limit_obj _ _ (Œª X, (F_obj X).2)‚ü©

lemma limit_obj‚ÇÇ_injective {ùíü‚ÇÅ ùíü‚ÇÇ : Type} [i‚ÇÅ : category ùíü‚ÇÅ] [i‚ÇÇ : category ùíü‚ÇÇ] 
  {F_obj‚ÇÅ : ùíü‚ÇÅ ‚Üí obj‚ÇÇ ùíû} {F_obj‚ÇÇ : ùíü‚ÇÇ ‚Üí obj‚ÇÇ ùíû} 
  {F_hom‚ÇÅ : Œ† {X Y : ùíü‚ÇÅ}, (X ‚ü∂ Y) ‚Üí hom‚ÇÇ (F_obj‚ÇÅ X) (F_obj‚ÇÅ Y)}
  {F_hom‚ÇÇ : Œ† {X Y : ùíü‚ÇÇ}, (X ‚ü∂ Y) ‚Üí hom‚ÇÇ (F_obj‚ÇÇ X) (F_obj‚ÇÇ Y)}
  (h : limit_obj‚ÇÇ F_obj‚ÇÅ @F_hom‚ÇÅ = limit_obj‚ÇÇ F_obj‚ÇÇ @F_hom‚ÇÇ) : 
  ùíü‚ÇÅ = ùíü‚ÇÇ ‚àß i‚ÇÅ == i‚ÇÇ ‚àß F_obj‚ÇÅ == F_obj‚ÇÇ ‚àß @F_hom‚ÇÅ == @F_hom‚ÇÇ :=
begin
  simp [limit_obj‚ÇÇ, limit_obj‚ÇÅ] at h,
  injection h with h‚ÇÅ h‚ÇÇ h‚ÇÉ h‚ÇÑ,
  unfreezingI { subst h‚ÇÅ },
  rw heq_iff_eq at h‚ÇÇ,
  unfreezingI { subst h‚ÇÇ },
  simp [heq_iff_eq, function.funext_iff, subtype.coe_injective.eq_iff] at h‚ÇÉ,
  rw [‚Üê function.funext_iff] at h‚ÇÉ,
  dsimp at h‚ÇÉ,
  subst h‚ÇÉ,
  simp [heq_iff_eq, function.funext_iff, subtype.coe_injective.eq_iff] at h‚ÇÑ,
  simp,
  ext,
  simp *
end

def colimit_obj‚ÇÇ (F_obj : ùíü ‚Üí obj‚ÇÇ ùíû) 
  (F_hom : Œ† {X Y : ùíü}, (X ‚ü∂ Y) ‚Üí hom‚ÇÇ (F_obj X) (F_obj Y)) : obj‚ÇÇ ùíû :=
‚ü®colimit_obj‚ÇÅ (Œª X, (F_obj X).1) (Œª X Y f, (F_hom f).1), valid_obj‚ÇÅ.colimit_obj _ _ (Œª X, (F_obj X).2)‚ü©

lemma colimit_obj‚ÇÇ_injective {ùíü‚ÇÅ ùíü‚ÇÇ : Type} [i‚ÇÅ : category ùíü‚ÇÅ] [i‚ÇÇ : category ùíü‚ÇÇ] 
  {F_obj‚ÇÅ : ùíü‚ÇÅ ‚Üí obj‚ÇÇ ùíû} {F_obj‚ÇÇ : ùíü‚ÇÇ ‚Üí obj‚ÇÇ ùíû} 
  {F_hom‚ÇÅ : Œ† {X Y : ùíü‚ÇÅ}, (X ‚ü∂ Y) ‚Üí hom‚ÇÇ (F_obj‚ÇÅ X) (F_obj‚ÇÅ Y)}
  {F_hom‚ÇÇ : Œ† {X Y : ùíü‚ÇÇ}, (X ‚ü∂ Y) ‚Üí hom‚ÇÇ (F_obj‚ÇÇ X) (F_obj‚ÇÇ Y)}
  (h : colimit_obj‚ÇÇ F_obj‚ÇÅ @F_hom‚ÇÅ = colimit_obj‚ÇÇ F_obj‚ÇÇ @F_hom‚ÇÇ) : 
  ùíü‚ÇÅ = ùíü‚ÇÇ ‚àß i‚ÇÅ == i‚ÇÇ ‚àß F_obj‚ÇÅ == F_obj‚ÇÇ ‚àß @F_hom‚ÇÅ == @F_hom‚ÇÇ :=
begin
  simp [colimit_obj‚ÇÇ, colimit_obj‚ÇÅ] at h,
  injection h with h‚ÇÅ h‚ÇÇ h‚ÇÉ h‚ÇÑ,
  unfreezingI { subst h‚ÇÅ },
  rw heq_iff_eq at h‚ÇÇ,
  unfreezingI { subst h‚ÇÇ },
  simp [heq_iff_eq, function.funext_iff, subtype.coe_injective.eq_iff] at h‚ÇÉ,
  rw [‚Üê function.funext_iff] at h‚ÇÉ,
  dsimp at h‚ÇÉ,
  subst h‚ÇÉ,
  simp [heq_iff_eq, function.funext_iff, subtype.coe_injective.eq_iff] at h‚ÇÑ,
  simp,
  ext,
  simp *
end

def of_cat_hom‚ÇÇ {X Y : ùíû} (f : X ‚ü∂ Y) : hom‚ÇÇ (of_cat_obj‚ÇÇ X) (of_cat_obj‚ÇÇ Y) :=
‚ü®of_cat_hom‚ÇÅ f, valid_hom‚ÇÅ.of_cat_hom _‚ü© 

def limit_cone_comp‚ÇÇ (F_obj : ùíü ‚Üí obj‚ÇÇ ùíû)
  (F_hom : Œ† {X Y : ùíü}, (X ‚ü∂ Y) ‚Üí hom‚ÇÇ (F_obj X) (F_obj Y)) (X : ùíü) 
  {Y : obj‚ÇÇ ùíû} (f : hom‚ÇÇ (F_obj X) Y) :
  hom‚ÇÇ (limit_obj‚ÇÇ F_obj @F_hom) Y :=
‚ü®limit_cone_comp‚ÇÅ (Œª X, (F_obj X).1) (Œª X Y f, (F_hom f).1) X f.1, 
  valid_hom‚ÇÅ.limit_cone_comp _ (Œª X, (F_obj X).2) _ _ _ (Œª X Y f, (F_hom f).2) f.2‚ü©

def colimit_cocone_comp‚ÇÇ (F_obj : ùíü ‚Üí obj‚ÇÇ ùíû)
  (F_hom : Œ† {X Y : ùíü}, (X ‚ü∂ Y) ‚Üí hom‚ÇÇ (F_obj X) (F_obj Y)) (X : ùíü) 
  {Y : obj‚ÇÇ ùíû} (f : hom‚ÇÇ Y (F_obj X)):
  hom‚ÇÇ Y (colimit_obj‚ÇÇ F_obj @F_hom) :=
‚ü®colimit_cocone_comp‚ÇÅ (Œª X, (F_obj X).1) (Œª X Y f, (F_hom f).1) X f.1, 
  valid_hom‚ÇÅ.colimit_cocone_comp _ (Œª X, (F_obj X).2) _ _ _ (Œª X Y f, (F_hom f).2) f.2‚ü©

def is_limit‚ÇÇ (F_obj : ùíü ‚Üí obj‚ÇÇ ùíû) 
  (F_hom : Œ† {X Y : ùíü}, (X ‚ü∂ Y) ‚Üí hom‚ÇÇ (F_obj X) (F_obj Y))
  (cone_obj : obj‚ÇÇ ùíû)
  (cone : Œ† (X : ùíü), hom‚ÇÇ cone_obj (F_obj X)) :
  hom‚ÇÇ cone_obj (limit_obj‚ÇÇ F_obj @F_hom) :=
‚ü®is_limit‚ÇÅ (Œª X, (F_obj X).1) (Œª X Y f, (F_hom f).1) cone_obj.1 (Œª X, (cone X).1), 
  valid_hom‚ÇÅ.is_limit _ (Œª X, (F_obj X).2) _ _ _ (Œª X Y f, (F_hom f).2) (Œª X, (cone X).2)‚ü©

def is_colimit‚ÇÇ (F_obj : ùíü ‚Üí obj‚ÇÇ ùíû) 
  (F_hom : Œ† {X Y : ùíü}, (X ‚ü∂ Y) ‚Üí hom‚ÇÇ (F_obj X) (F_obj Y))
  (cocone_obj : obj‚ÇÇ ùíû)
  (cocone : Œ† (X : ùíü), hom‚ÇÇ (F_obj X) cocone_obj) :
  hom‚ÇÇ (colimit_obj‚ÇÇ F_obj @F_hom) cocone_obj  :=
‚ü®is_colimit‚ÇÅ (Œª X, (F_obj X).1) (Œª X Y f, (F_hom f).1) cocone_obj.1 (Œª X, (cocone X).1), 
  valid_hom‚ÇÅ.is_colimit _ (Œª X, (F_obj X).2) _ _ _ (Œª X Y f, (F_hom f).2) (Œª X, (cocone X).2)‚ü©

def id‚ÇÇ (X : obj‚ÇÇ ùíû) : hom‚ÇÇ X X := ‚ü®id‚ÇÅ X.1, valid_hom‚ÇÅ.id _‚ü© 

@[elab_as_eliminator] protected def hom‚ÇÇ.rec_on 
  {motive : Œ† {X Y : obj‚ÇÇ ùíû} (f : hom‚ÇÇ X Y), Sort*} {X Y : obj‚ÇÇ ùíû} (f : hom‚ÇÇ X Y)
  (of_cat_hom : Œ† {X Y : ùíû} (f : X ‚ü∂ Y), motive (of_cat_hom‚ÇÇ f))
  (limit_cone_comp : Œ† {ùíü : Type} [category ùíü] (F_obj : ùíü ‚Üí obj‚ÇÇ ùíû)
    (F_hom : Œ† {X Y : ùíü}, (by exactI X ‚ü∂ Y) ‚Üí hom‚ÇÇ (F_obj X) (F_obj Y))
    (ih_F_hom : Œ† {X Y : ùíü} (f : by exactI X ‚ü∂ Y), motive (F_hom f))
    (X : ùíü) {Y : obj‚ÇÇ ùíû} (f : hom‚ÇÇ (F_obj X) Y)
    (ih_f : motive f),
      motive (by exactI limit_cone_comp‚ÇÇ F_obj @F_hom X f))
  (colimit_cocone_comp : Œ† {ùíü : Type} [category ùíü] (F_obj : ùíü ‚Üí obj‚ÇÇ ùíû)
    (F_hom : Œ† {X Y : ùíü}, (by exactI X ‚ü∂ Y) ‚Üí hom‚ÇÇ (F_obj X) (F_obj Y)) 
    (ih_F_hom : Œ† {X Y : ùíü} (f : by exactI X ‚ü∂ Y), motive (F_hom f))
    (X : ùíü) {Y : obj‚ÇÇ ùíû} (f : hom‚ÇÇ Y (F_obj X))
    (ih_f : motive f),
      motive (by exactI colimit_cocone_comp‚ÇÇ F_obj @F_hom X f))
  (is_limit : Œ† {ùíü : Type} [category ùíü] (F_obj : ùíü ‚Üí obj‚ÇÇ ùíû)
    (F_hom : Œ† {X Y : ùíü}, (by exactI X ‚ü∂ Y) ‚Üí hom‚ÇÇ (F_obj X) (F_obj Y))
    (ih_F_hom : Œ† {X Y : ùíü} (f : by exactI X ‚ü∂ Y), motive (F_hom f)) 
    (cone_obj : obj‚ÇÇ ùíû) (cone : Œ† (X : ùíü), hom‚ÇÇ cone_obj (F_obj X))
    (ih_cone : Œ† (X : ùíü), motive (cone X)),
      motive (by exactI is_limit‚ÇÇ F_obj @F_hom cone_obj cone))
  (is_colimit : Œ† {ùíü : Type} [category ùíü] (F_obj : ùíü ‚Üí obj‚ÇÇ ùíû)
    (F_hom : Œ† {X Y : ùíü}, (by exactI X ‚ü∂ Y) ‚Üí hom‚ÇÇ (F_obj X) (F_obj Y)) 
    (ih_F_hom : Œ† {X Y : ùíü} (f : by exactI X ‚ü∂ Y), motive (F_hom f))
    (cocone_obj : obj‚ÇÇ ùíû) (cocone : Œ† (X : ùíü), hom‚ÇÇ (F_obj X) cocone_obj)
    (ih_cone : Œ† (X : ùíü), motive (cocone X)),
      motive (by exactI is_colimit‚ÇÇ F_obj @F_hom cocone_obj cocone))
  (id : Œ† (X : obj‚ÇÇ ùíû), motive (id‚ÇÇ X)):
  motive f :=
begin
  cases X with X hX, cases Y with Y hY,
  cases f with f hf,
  rcases f with ‚ü®f, hfd, hfc‚ü©,
  revert X Y hX hY,
  refine hom_rec_on f _ _ _ _ _ _,
  { intros A B f X Y hX hY hfd hfc hf,
    dsimp at hfd hfc, substs hfc hfd,
    exact of_cat_hom f },
  { introsI ùíü _ F_obj F_hom A B g ih‚ÇÅ ih‚ÇÇ X Y hX hY hfd hfc hf,
    dsimp at hfd hfc, substs hfc hfd,
    have valid_F_obj : ‚àÄ X, valid_obj‚ÇÅ (F_obj X),
    { cases hf, assumption },
    let F_obj' : ùíü ‚Üí obj‚ÇÇ ùíû := Œª X, ‚ü®F_obj X, valid_F_obj X‚ü©,
    have valid_F_hom : ‚àÄ X Y f, 
      ‚àÉ (h‚ÇÅ : (@F_hom X Y f).dom = F_obj X) 
      (h‚ÇÇ : (@F_hom X Y f).cod = F_obj Y),
      valid_hom‚ÇÅ ‚ü®@F_hom X Y f, h‚ÇÅ, h‚ÇÇ‚ü©,
    { cases hf, simpa },
     let F_hom' : Œ† (X Y : ùíü) (f : X ‚ü∂ Y), hom‚ÇÇ (F_obj' X) (F_obj' Y) :=
      Œª X Y f, ‚ü®‚ü®@F_hom X Y f, (valid_F_hom X Y f).fst, (valid_F_hom X Y f).snd.fst‚ü©,
        (valid_F_hom X Y f).snd.snd‚ü©,
    have valid_g : 
      ‚àÉ (h‚ÇÅ : g.dom = F_obj A) (h‚ÇÇ : g.cod = B),
      valid_hom‚ÇÅ ‚ü®g, h‚ÇÅ, h‚ÇÇ‚ü©,
    { cases hf, simpa },
    let g' : hom‚ÇÇ (F_obj' A) ‚ü®B, hY‚ü© :=
      ‚ü®‚ü®g, valid_g.fst, valid_g.snd.fst‚ü©, valid_g.snd.snd‚ü©,
    exact limit_cone_comp F_obj' F_hom'
      (Œª X Y f, ih‚ÇÅ f (F_obj X) (F_obj Y) (valid_F_obj _) (valid_F_obj _)
          (valid_F_hom _ _ f).fst (valid_F_hom _ _ f).snd.fst
          (valid_F_hom _ _ f).snd.snd) A g'
          (ih‚ÇÇ (F_obj' A).1 B (F_obj' A).2 hY g'.1.2.1 g'.1.2.2 g'.2) },
  { introsI ùíü _ F_obj F_hom cone_obj cone ih‚ÇÅ ih‚ÇÇ X Y hX hY hfd hfc hf,
    dsimp at hfd hfc,
    substs hfc hfd,
    have valid_F_obj : ‚àÄ X, valid_obj‚ÇÅ (F_obj X),
    { cases hf, assumption },
    let F_obj' : ùíü ‚Üí obj‚ÇÇ ùíû := Œª X, ‚ü®F_obj X, valid_F_obj X‚ü©,
    have valid_F_hom : ‚àÄ X Y f, 
      ‚àÉ (h‚ÇÅ : (@F_hom X Y f).dom = F_obj X) 
      (h‚ÇÇ : (@F_hom X Y f).cod = F_obj Y),
      valid_hom‚ÇÅ ‚ü®@F_hom X Y f, h‚ÇÅ, h‚ÇÇ‚ü©,
    { cases hf, simpa },
    let F_hom' : Œ† (X Y : ùíü) (f : X ‚ü∂ Y), hom‚ÇÇ (F_obj' X) (F_obj' Y) :=
      Œª X Y f, ‚ü®‚ü®@F_hom X Y f, (valid_F_hom X Y f).fst, (valid_F_hom X Y f).snd.fst‚ü©,
        (valid_F_hom X Y f).snd.snd‚ü©,
    let cone_obj' : obj‚ÇÇ ùíû := ‚ü®cone_obj, hX‚ü©,
    have valid_cone : ‚àÄ (X : ùíü), ‚àÉ (h‚ÇÅ : (cone X).dom = cone_obj'.1)
      (h‚ÇÇ : (cone X).cod = (F_obj' X).1),
      valid_hom‚ÇÅ ‚ü®cone X, h‚ÇÅ, h‚ÇÇ‚ü©,
    { cases hf, simpa },
    let cone' : Œ† (X : ùíü), hom‚ÇÇ cone_obj' (F_obj' X) :=
      Œª X, ‚ü®‚ü®cone X, (valid_cone X).fst, (valid_cone X).snd.fst‚ü©, (valid_cone X).snd.snd‚ü©,
    exact is_limit F_obj' F_hom'
      (Œª A B f, ih‚ÇÅ f (F_obj A) (F_obj B) (F_obj' A).2 (F_obj' B).2
        (valid_F_hom _ _ f).fst (valid_F_hom _ _ f).snd.fst
        (valid_F_hom _ _ f).snd.snd)
        cone_obj' cone'
        (Œª X, ih‚ÇÇ X cone_obj'.1 (F_obj' X).1 cone_obj'.2 (F_obj' X).2
            (cone' X).1.2.1 (cone' X).1.2.2 (cone' X).2) },
  { introsI ùíü _ F_obj F_hom A B g ih‚ÇÅ ih‚ÇÇ X Y hX hY hfd hfc hf,
    dsimp at hfd hfc, substs hfc hfd,
    have valid_F_obj : ‚àÄ X, valid_obj‚ÇÅ (F_obj X),
    { cases hf, assumption },
    let F_obj' : ùíü ‚Üí obj‚ÇÇ ùíû := Œª X, ‚ü®F_obj X, valid_F_obj X‚ü©,
    have valid_F_hom : ‚àÄ X Y f, 
      ‚àÉ (h‚ÇÅ : (@F_hom X Y f).dom = F_obj X) 
      (h‚ÇÇ : (@F_hom X Y f).cod = F_obj Y),
      valid_hom‚ÇÅ ‚ü®@F_hom X Y f, h‚ÇÅ, h‚ÇÇ‚ü©,
    { cases hf, simpa },
    have valid_g : 
      ‚àÉ (h‚ÇÅ : g.dom = B) (h‚ÇÇ : g.cod = F_obj A),
      valid_hom‚ÇÅ ‚ü®g, h‚ÇÅ, h‚ÇÇ‚ü©,
    { cases hf, simpa },
    let g' : hom‚ÇÇ ‚ü®B, hX‚ü© (F_obj' A) :=
      ‚ü®‚ü®g, valid_g.fst, valid_g.snd.fst‚ü©, valid_g.snd.snd‚ü©,
    let F_hom' : Œ† (X Y : ùíü) (f : X ‚ü∂ Y), hom‚ÇÇ (F_obj' X) (F_obj' Y) :=
      Œª X Y f, ‚ü®‚ü®@F_hom X Y f, (valid_F_hom X Y f).fst, (valid_F_hom X Y f).snd.fst‚ü©,
        (valid_F_hom X Y f).snd.snd‚ü©,
    exact colimit_cocone_comp F_obj' F_hom'
      (Œª X Y f, ih‚ÇÅ f (F_obj X) (F_obj Y) (valid_F_obj _) (valid_F_obj _)
          (valid_F_hom _ _ f).fst (valid_F_hom _ _ f).snd.fst
          (valid_F_hom _ _ f).snd.snd) A g'
          (ih‚ÇÇ B (F_obj' A).1 hX (F_obj' A).2 g'.1.2.1 g'.1.2.2 g'.2) },
  { introsI ùíü _ F_obj F_hom cocone_obj cocone ih‚ÇÅ ih‚ÇÇ X Y hX hY hfd hfc hf,
    dsimp at hfd hfc,
    substs hfc hfd,
    have valid_F_obj : ‚àÄ X, valid_obj‚ÇÅ (F_obj X),
    { cases hf, assumption },
    let F_obj' : ùíü ‚Üí obj‚ÇÇ ùíû := Œª X, ‚ü®F_obj X, valid_F_obj X‚ü©,
    have valid_F_hom : ‚àÄ X Y f, 
      ‚àÉ (h‚ÇÅ : (@F_hom X Y f).dom = F_obj X) 
      (h‚ÇÇ : (@F_hom X Y f).cod = F_obj Y),
      valid_hom‚ÇÅ ‚ü®@F_hom X Y f, h‚ÇÅ, h‚ÇÇ‚ü©,
    { cases hf, simpa },
    let F_hom' : Œ† (X Y : ùíü) (f : X ‚ü∂ Y), hom‚ÇÇ (F_obj' X) (F_obj' Y) :=
      Œª X Y f, ‚ü®‚ü®@F_hom X Y f, (valid_F_hom X Y f).fst, (valid_F_hom X Y f).snd.fst‚ü©,
        (valid_F_hom X Y f).snd.snd‚ü©,
    let cocone_obj' : obj‚ÇÇ ùíû := ‚ü®cocone_obj, hY‚ü©,
    have valid_cocone : ‚àÄ (X : ùíü), ‚àÉ (h‚ÇÅ : (cocone X).dom = (F_obj' X).1)
      (h‚ÇÇ : (cocone X).cod = cocone_obj'.1),
      valid_hom‚ÇÅ ‚ü®cocone X, h‚ÇÅ, h‚ÇÇ‚ü©,
    { cases hf, simpa },
    let cocone' : Œ† (X : ùíü), hom‚ÇÇ (F_obj' X) cocone_obj' :=
      Œª X, ‚ü®‚ü®cocone X, (valid_cocone X).fst, (valid_cocone X).snd.fst‚ü©, (valid_cocone X).snd.snd‚ü©,
    exact is_colimit F_obj' F_hom'
      (Œª A B f, ih‚ÇÅ f (F_obj A) (F_obj B) (F_obj' A).2 (F_obj' B).2
        (valid_F_hom _ _ f).fst (valid_F_hom _ _ f).snd.fst
        (valid_F_hom _ _ f).snd.snd)
        cocone_obj' cocone'
        (Œª X, ih‚ÇÇ X (F_obj' X).1 cocone_obj'.1 (F_obj' X).2 cocone_obj'.2 
            (cocone' X).1.2.1 (cocone' X).1.2.2 (cocone' X).2) },
  { intros A B C hB _ hAB hBC _,
    dsimp at hAB hBC, subst A, subst C, 
    exact id ‚ü®B, hB‚ü© }
end

def hom‚ÇÇ_of_cat_obj_rec_on
  {motive : Œ† {X : ùíû} {Y : obj‚ÇÇ ùíû} (f : hom‚ÇÇ (of_cat_obj‚ÇÇ X) Y), Sort*} 
  {X : ùíû} {Y : obj‚ÇÇ ùíû} (f : hom‚ÇÇ (of_cat_obj‚ÇÇ X) Y)
  (of_cat_hom : Œ† {Y : ùíû} (f : X ‚ü∂ Y), motive (of_cat_hom‚ÇÇ f))
  (colimit_cocone_comp : Œ† {ùíü : Type} [category ùíü] (F_obj : ùíü ‚Üí obj‚ÇÇ ùíû)
    (F_hom : Œ† {X Y : ùíü}, (by exactI X ‚ü∂ Y) ‚Üí hom‚ÇÇ (F_obj X) (F_obj Y)) 
    (X : ùíü) {Y : ùíû} (f : hom‚ÇÇ (of_cat_obj‚ÇÇ Y) (F_obj X))
    (ih_f : motive f),
      motive (by exactI colimit_cocone_comp‚ÇÇ F_obj @F_hom X f))
  (is_limit : Œ† {ùíü : Type} [category ùíü] (F_obj : ùíü ‚Üí obj‚ÇÇ ùíû)
    (F_hom : Œ† {X Y : ùíü}, (by exactI X ‚ü∂ Y) ‚Üí hom‚ÇÇ (F_obj X) (F_obj Y))
    (cone_obj : ùíû) (cone : Œ† (X : ùíü), hom‚ÇÇ (of_cat_obj‚ÇÇ cone_obj) (F_obj X))
    (ih_cone : Œ† (X : ùíü), motive (cone X)),
      motive (by exactI is_limit‚ÇÇ F_obj @F_hom (of_cat_obj‚ÇÇ cone_obj) cone)) 
  (id : motive (id‚ÇÇ (of_cat_obj‚ÇÇ X))):
  motive f := 
@hom‚ÇÇ.rec_on ùíû _ (Œª A B f, ‚àÄ (h : A = of_cat_obj‚ÇÇ X),
  motive (show hom‚ÇÇ (of_cat_obj‚ÇÇ X) B, from eq.rec_on h f))
  (of_cat_obj‚ÇÇ X) Y f 
  (Œª A B g h, begin
      have := of_cat_obj‚ÇÇ_injective h,
      subst this,
      dsimp,
      exact of_cat_hom g
    end) 
  begin 
    intros,
    simp [limit_obj‚ÇÇ, of_cat_obj‚ÇÇ, limit_obj‚ÇÅ] at h,
    contradiction
  end 
  begin
    introsI ùíü _ F_obj F_hom ih‚ÇÅ A B g ih‚ÇÇ h,
    subst h,
    exact colimit_cocone_comp _ _ _ _ (ih‚ÇÇ rfl)
  end 
  begin
    introsI ùíü _ F_obj F_hom ih‚ÇÅ cone_obj cone ih‚ÇÇ h,
    subst h,
    exact is_limit _ _ _ _ (Œª A, ih‚ÇÇ A rfl),
  end 
  begin 
    intros,
    simp [colimit_obj‚ÇÇ, of_cat_obj‚ÇÇ] at h,
    contradiction
  end
  begin
    intros X h,
    subst h,
    exact id
  end
  rfl

def hom‚ÇÇ_limit_obj_rec_on
  {motive : Œ† {ùíü : Type} [category ùíü] {F_obj : ùíü ‚Üí obj‚ÇÇ ùíû}
    {F_hom : Œ† {X Y : ùíü}, (by exactI X ‚ü∂ Y) ‚Üí hom‚ÇÇ (F_obj X) (F_obj Y)} {Y : obj‚ÇÇ ùíû}, 
    hom‚ÇÇ (by exactI limit_obj‚ÇÇ F_obj @F_hom) Y ‚Üí Sort*}
  {ùíü : Type} [category ùíü] {F_obj : ùíü ‚Üí obj‚ÇÇ ùíû}
  {F_hom : Œ† {X Y : ùíü}, (X ‚ü∂ Y) ‚Üí hom‚ÇÇ (F_obj X) (F_obj Y)} {Y : obj‚ÇÇ ùíû}
  (f : hom‚ÇÇ (limit_obj‚ÇÇ F_obj @F_hom) Y)
  (limit_cone_comp : Œ† {ùíü : Type} [category ùíü] (F_obj : ùíü ‚Üí obj‚ÇÇ ùíû)
    (F_hom : Œ† {X Y : ùíü}, (by exactI X ‚ü∂ Y) ‚Üí hom‚ÇÇ (F_obj X) (F_obj Y))
    (X : ùíü) {Y : obj‚ÇÇ ùíû} (f : hom‚ÇÇ (F_obj X) Y),
      by exactI motive (limit_cone_comp‚ÇÇ F_obj @F_hom X f))
  (colimit_cocone_comp : Œ† {ùíü : Type} [category ùíü] (F_obj : ùíü ‚Üí obj‚ÇÇ ùíû)
    (F_hom : Œ† {X Y : ùíü}, (by exactI X ‚ü∂ Y) ‚Üí hom‚ÇÇ (F_obj X) (F_obj Y))
    (X : ùíü)
    {‚Ñ∞ : Type} [category ‚Ñ∞] (G_obj : ‚Ñ∞ ‚Üí obj‚ÇÇ ùíû)
    (G_hom : Œ† {X Y : ‚Ñ∞}, (by exactI X ‚ü∂ Y) ‚Üí hom‚ÇÇ (G_obj X) (G_obj Y))
    (f : hom‚ÇÇ (by exactI limit_obj‚ÇÇ G_obj @G_hom) (F_obj X))
    (ih_f : by exactI motive f),
      by exactI motive (colimit_cocone_comp‚ÇÇ F_obj @F_hom X f))
  (is_limit : Œ† {ùíü : Type} [category ùíü] (F_obj : ùíü ‚Üí obj‚ÇÇ ùíû)
    (F_hom : Œ† {X Y : ùíü}, (by exactI X ‚ü∂ Y) ‚Üí hom‚ÇÇ (F_obj X) (F_obj Y))
    {‚Ñ∞ : Type} [category ‚Ñ∞] (G_obj : ‚Ñ∞ ‚Üí obj‚ÇÇ ùíû)
    (G_hom : Œ† {X Y : ‚Ñ∞}, (by exactI X ‚ü∂ Y) ‚Üí hom‚ÇÇ (G_obj X) (G_obj Y))
    (cone : Œ† (X : ùíü), hom‚ÇÇ (by exactI limit_obj‚ÇÇ G_obj @G_hom) (F_obj X))
    (ih_cone : Œ† (X : ùíü), by exactI motive (cone X)),
      by exactI motive (is_limit‚ÇÇ F_obj @F_hom (limit_obj‚ÇÇ G_obj @G_hom) cone))
  (id : by exactI motive (id‚ÇÇ (limit_obj‚ÇÇ F_obj @F_hom))) :
  motive f :=
@hom‚ÇÇ.rec_on ùíû _ (Œª A B f, ‚àÄ (h : A = limit_obj‚ÇÇ F_obj @F_hom),
  motive (show hom‚ÇÇ (limit_obj‚ÇÇ F_obj @F_hom) B, from eq.rec_on h f))
  (limit_obj‚ÇÇ F_obj @F_hom) Y f 
  begin 
    intros,
    simp [limit_obj‚ÇÇ, of_cat_obj‚ÇÇ, limit_obj‚ÇÅ] at h,
    contradiction
  end  
  begin 
    introsI ‚Ñ∞ _ G_obj G_hom ih‚ÇÅ A B g ih‚ÇÇ h,
    unfreezingI { rcases (limit_obj‚ÇÇ_injective h) with ‚ü®rfl, h‚ÇÅ, h‚ÇÇ, h‚ÇÉ‚ü© },
    unfreezingI { subst h‚ÇÅ, subst h‚ÇÇ, subst h‚ÇÉ },
    exact limit_cone_comp _ _ _ _
  end 
  begin
    introsI ùíü _ F_obj F_hom ih‚ÇÅ A B g ih‚ÇÇ h,
    subst h,
    exact colimit_cocone_comp _ _ _ _ _ _ (ih‚ÇÇ rfl)
  end 
  begin
    introsI ùíü _ F_obj F_hom ih‚ÇÅ cone_obj cone ih‚ÇÇ h,
    subst h,
    exact is_limit _ _ _ _ _ (Œª A, ih‚ÇÇ A rfl),
  end 
  begin 
    intros,
    simp [colimit_obj‚ÇÇ, of_cat_obj‚ÇÇ, limit_obj‚ÇÇ] at h,
    contradiction
  end
  begin
    introsI X h,
    subst h,
    exact id
  end
  rfl

@[elab_as_eliminator] def hom‚ÇÇ_colimit_obj_rec_on
  {motive : Œ† {ùíü : Type} [category ùíü] {F_obj : ùíü ‚Üí obj‚ÇÇ ùíû}
    {F_hom : Œ† {X Y : ùíü}, (by exactI X ‚ü∂ Y) ‚Üí hom‚ÇÇ (F_obj X) (F_obj Y)} {Y : obj‚ÇÇ ùíû}, 
    hom‚ÇÇ (by exactI colimit_obj‚ÇÇ F_obj @F_hom) Y ‚Üí Sort*}
  {ùíü : Type} [category ùíü] {F_obj : ùíü ‚Üí obj‚ÇÇ ùíû}
  {F_hom : Œ† {X Y : ùíü}, (X ‚ü∂ Y) ‚Üí hom‚ÇÇ (F_obj X) (F_obj Y)} {Y : obj‚ÇÇ ùíû}
  (f : hom‚ÇÇ (colimit_obj‚ÇÇ F_obj @F_hom) Y)
  (colimit_cocone_comp : Œ† {ùíü : Type} [category ùíü] (F_obj : ùíü ‚Üí obj‚ÇÇ ùíû)
    (F_hom : Œ† {X Y : ùíü}, (by exactI X ‚ü∂ Y) ‚Üí hom‚ÇÇ (F_obj X) (F_obj Y))
    (X : ùíü) 
    {‚Ñ∞ : Type} [category ‚Ñ∞] {G_obj : ‚Ñ∞ ‚Üí obj‚ÇÇ ùíû}
    {G_hom : Œ† {X Y : ‚Ñ∞}, (by exactI X ‚ü∂ Y) ‚Üí hom‚ÇÇ (G_obj X) (G_obj Y)} 
    (f : hom‚ÇÇ (by exactI colimit_obj‚ÇÇ G_obj @G_hom) (F_obj X))
    (ih_f : by exactI motive f),
      by exactI motive (by exactI colimit_cocone_comp‚ÇÇ F_obj @F_hom X f))
  (is_limit : Œ† {ùíü : Type} [category ùíü] (F_obj : ùíü ‚Üí obj‚ÇÇ ùíû)
    (F_hom : Œ† {X Y : ùíü}, (by exactI X ‚ü∂ Y) ‚Üí hom‚ÇÇ (F_obj X) (F_obj Y))
    {‚Ñ∞ : Type} [category ‚Ñ∞] {G_obj : ‚Ñ∞ ‚Üí obj‚ÇÇ ùíû}
    {G_hom : Œ† {X Y : ‚Ñ∞}, (by exactI X ‚ü∂ Y) ‚Üí hom‚ÇÇ (G_obj X) (G_obj Y)}
    (cone : Œ† (X : ùíü), hom‚ÇÇ (by exactI colimit_obj‚ÇÇ G_obj @G_hom) (F_obj X))
    (ih_cone : Œ† (X : ùíü), by exactI motive (cone X)),
      by exactI motive (by exactI is_limit‚ÇÇ F_obj @F_hom _ cone))
  (is_colimit : Œ† {ùíü : Type} [category ùíü] (F_obj : ùíü ‚Üí obj‚ÇÇ ùíû)
    (F_hom : Œ† {X Y : ùíü}, (by exactI X ‚ü∂ Y) ‚Üí hom‚ÇÇ (F_obj X) (F_obj Y)) 
    (cocone_obj : obj‚ÇÇ ùíû) (cocone : Œ† (X : ùíü), hom‚ÇÇ (F_obj X) cocone_obj),
      by exactI motive (is_colimit‚ÇÇ F_obj @F_hom cocone_obj cocone)) 
  (id : by exactI motive (id‚ÇÇ (colimit_obj‚ÇÇ F_obj @F_hom))):
  motive f :=
@hom‚ÇÇ.rec_on ùíû _ (Œª A B f, ‚àÄ (h : A = colimit_obj‚ÇÇ F_obj @F_hom),
  motive (show hom‚ÇÇ (colimit_obj‚ÇÇ F_obj @F_hom) B, from eq.rec_on h f))
  (colimit_obj‚ÇÇ F_obj @F_hom) Y f 
  begin 
    intros,
    simp [colimit_obj‚ÇÇ, of_cat_obj‚ÇÇ, colimit_obj‚ÇÅ] at h,
    contradiction
  end 
  begin 
    intros,
    simp [colimit_obj‚ÇÇ, of_cat_obj‚ÇÇ, colimit_obj‚ÇÅ, limit_obj‚ÇÅ, limit_obj‚ÇÇ] at h,
    contradiction
  end
  begin
    introsI ùíü _ F_obj F_hom ih‚ÇÅ A B f ih‚ÇÇ h,
    subst h,
    exact colimit_cocone_comp _ _ _ _ (ih‚ÇÇ rfl)
  end
  begin
    introsI ùíü _ F_obj F_hom ih‚ÇÅ cone_obj cone ih‚ÇÇ h,
    subst h,
    exact is_limit _ _ _ (Œª X, ih‚ÇÇ X rfl)
  end
  begin
    introsI ‚Ñ∞ _ G_obj G_hom ih‚ÇÅ cocone_obj cocone ih‚ÇÇ h,
    unfreezingI { rcases (colimit_obj‚ÇÇ_injective h) with ‚ü®rfl, h‚ÇÅ, h‚ÇÇ, h‚ÇÉ‚ü© },
    unfreezingI { subst h‚ÇÅ, subst h‚ÇÇ, subst h‚ÇÉ },
    exact is_colimit _ _ _ _
  end
  begin
    introsI X h,
    subst h,
    exact id
  end
  rfl

def comp‚ÇÇ {X Y : obj‚ÇÇ ùíû} (f : hom‚ÇÇ X Y) : Œ† {Z : obj‚ÇÇ ùíû}, hom‚ÇÇ Y Z ‚Üí hom‚ÇÇ X Z :=
hom‚ÇÇ.rec_on f 
  begin
    intros X Y f Z g,
    refine hom‚ÇÇ_of_cat_obj_rec_on g _ _ _ _,
    { intros B g,
      exact of_cat_hom‚ÇÇ (f ‚â´ g) },
    { introsI ùíü _ F_obj F_hom A B g ih,
      exact colimit_cocone_comp‚ÇÇ F_obj @F_hom A ih },
    { introsI ùíü _ F_obj F_hom A cone ih,
      exact is_limit‚ÇÇ F_obj @F_hom (of_cat_obj‚ÇÇ X) (Œª X, ih _) },
    { exact of_cat_hom‚ÇÇ f }
  end
  begin
    introsI ùíü _ F_obj F_hom ih‚ÇÅ A B f ih‚ÇÇ Z g,
    refine limit_cone_comp‚ÇÇ F_obj @F_hom A (ih‚ÇÇ g),
  end
  begin
    introsI ùíü _ F_obj F_hom ih‚ÇÅ A B f ih‚ÇÇ Z g,
    revert ih‚ÇÇ A,
    refine hom‚ÇÇ_colimit_obj_rec_on g _ _ _ _,
    { introsI ‚Ñ∞ _ G_obj G_hom C ‚Ñ± _ H_obj H_hom ih‚ÇÉ ih‚ÇÑ A g ih‚ÇÇ,
      refine colimit_cocone_comp‚ÇÇ G_obj @G_hom C (ih‚ÇÑ A g @ih‚ÇÇ) },
    { introsI ‚Ñ∞ _ G_obj G_hom ‚Ñ± _ H_obj H_hom ih‚ÇÉ ih‚ÇÑ A g ih‚ÇÇ,
      exact is_limit‚ÇÇ G_obj @G_hom B (Œª X, ih‚ÇÑ X A g @ih‚ÇÇ) },
    { introsI ‚Ñ∞ _ G_obj G_hom cocone_obj cocone A g ih‚ÇÇ,
      exact ih‚ÇÇ (cocone A) },
    { intros A f _,
      exact colimit_cocone_comp‚ÇÇ F_obj @F_hom A f }
  end 
  begin
    introsI ùíü _ F_obj F_hom ih‚ÇÅ cone_obj cone ih‚ÇÇ Z g,
    revert ih‚ÇÇ,
    refine hom‚ÇÇ_limit_obj_rec_on g _ _ _ _,
    { introsI ‚Ñ∞ _ G_obj G_hom A B g ih‚ÇÇ,
      exact ih‚ÇÇ A g },
    { introsI ‚Ñ∞ _ F_obj F_hom A ‚Ñ± _ G_obj G_hom g ih‚ÇÉ ih‚ÇÇ,
      exact colimit_cocone_comp‚ÇÇ F_obj @F_hom A (ih‚ÇÉ @ih‚ÇÇ) },
    { introsI ‚Ñ∞ _ F_obj F_hom ‚Ñ± _ G_obj G_hom ih‚ÇÉ ih‚ÇÑ ih‚ÇÇ,
      exact is_limit‚ÇÇ F_obj @F_hom cone_obj (Œª X, ih‚ÇÑ _ @ih‚ÇÇ) },
    { introsI ih,
      exact is_limit‚ÇÇ F_obj @F_hom cone_obj cone }
  end
  begin
    introsI ùíü _ F_obj F_hom ih‚ÇÅ cocone_obj cocone ih‚ÇÇ Z g,
    exact is_colimit‚ÇÇ F_obj @F_hom Z (Œª A, ih‚ÇÇ A g)
  end
  (Œª _ _ g, g)
#print has_limits_of_size
variables {‚Ñ∞ : Type u} [category ‚Ñ∞] [has_limits_of_size.{0} ‚Ñ∞] [has_colimits_of_size.{0} ‚Ñ∞] (F : ùíû ‚•§ ‚Ñ∞)

def UMP_obj {X Y : obj‚ÇÇ ùíû} (f : hom‚ÇÇ X Y) : Œ£ A B : ‚Ñ∞, A ‚ü∂ B :=
hom‚ÇÇ.rec_on f 
  (Œª X Y f, ‚ü®F.obj X, F.obj Y, F.map f‚ü©) 
  begin
    introsI ùíü _ F_obj F_hom ih‚ÇÅ A B g ih‚ÇÇ,

  end
  _ 
  _ 
  _ 
  _


end bicompletion_aux
