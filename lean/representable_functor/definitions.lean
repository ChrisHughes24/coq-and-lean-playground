import category_theory.adjunction
import category_theory.comma
import category_theory.punit
import category_theory.limits.types

open category_theory opposite

variables (C : Type) [category.{0} C] (F : C ‚•§ Type) (G : C·µí·µñ ‚•§ Type)

def presheaf_to_copresheaf : (C·µí·µñ ‚•§ Type) ‚•§ (C ‚•§ Type)·µí·µñ :=
functor.right_op (coyoneda ‚ãô (whiskering_left C (C·µí·µñ ‚•§ Type) Type).obj yoneda)

def copresheaf_to_presheaf : (C ‚•§ Type)·µí·µñ ‚•§ (C·µí·µñ ‚•§ Type) :=
coyoneda ‚ãô (whiskering_left C·µí·µñ (C ‚•§ Type) Type).obj coyoneda

local attribute [simp] copresheaf_to_presheaf presheaf_to_copresheaf

example : presheaf_to_copresheaf C ‚ä£ copresheaf_to_presheaf C :=
adjunction.mk_of_unit_counit
  { unit :=
    { app := Œª F,
      { app := Œª X FX,
        { app := Œª Y f, f.app X FX },
          naturality' := begin
            intros X Y f,
            ext FX Z g,
            dsimp at *,
            exact function.funext_iff.1 (g.naturality f) FX
          end } },
    counit :=
    { app := Œª F, show op (unop ((presheaf_to_copresheaf C).obj
          ((copresheaf_to_presheaf C).obj F))) ‚ü∂ op (unop F),
        from quiver.hom.op
      { app := Œª X FX,
        { app := Œª Y f, f.app X FX },
          naturality' := begin
            intros X Y f,
            ext FX Z g,
            dsimp at *,
            exact function.funext_iff.1 (g.naturality f) FX
          end } },
    left_triangle' := begin
      ext F,
      dsimp [presheaf_to_copresheaf, copresheaf_to_presheaf],
      refine quiver.hom.unop_inj _,
      ext, refl
    end,
    right_triangle' := by { ext, refl } }

def as_cone (X : C) : limits.cone (comma.snd ((category_theory.functor.const (discrete unit)).obj X) (ùü≠ C)) :=
{ X := X,
  œÄ :=
  { app := Œª Y, Y.hom,
    naturality' := Œª Y Z f, f.3 } }

def is_limit_as_cone (X : C) : limits.is_limit (as_cone C X) :=
{ lift := Œª s, s.2.app ‚ü®(), X, ùüô X‚ü©,
  fac' := Œª s j, begin
      dsimp [as_cone],
      let f : (‚ü®(), X, ùüô X‚ü© : comma ((category_theory.functor.const (discrete unit)).obj X) (ùü≠ C)) ‚ü∂ j :=
        ‚ü®‚ü®‚ü®subsingleton.elim _ _‚ü©‚ü©, j.hom, by tidy‚ü©,
      have := (@s.2.naturality f).symm,
      dsimp at *,
      simp [this]
    end,
  uniq' := Œª s m h, begin
    dsimp [as_cone] at *,
    rw ‚Üê h,
    simp,
  end }

def iso_of_preserves_limits (F : C·µí·µñ ‚•§ Type) [limits.preserves_limits F] :
  F ‚âÖ (copresheaf_to_presheaf C).obj ((presheaf_to_copresheaf C).obj F) :=
nat_iso.of_components
  (Œª X,
    { hom := Œª FX, { app := Œª Y f, f.app X FX },
      inv := Œª f,
      --  let s : limits.cone (comma.snd ((category_theory.functor.const (discrete unit)).obj X) (ùü≠ C·µí·µñ) ‚ãô F) :=
      --   { X := unit,
      --     œÄ :=
      --     { app := Œª Y g, begin
      --         dsimp at *,
      --         have := g.app,
      --         dsimp at *,

      --     end } },

      begin
        dsimp at *,
        have := f.app,
        dsimp at this,
        apply (limits.is_limit_of_preserves F (is_limit_as_cone C·µí·µñ X)).lift
          (limits.limit.cone _),
        dsimp [as_cone] at *,
        tidy,
        have := f.app (unop j.right),
        rcases j with ‚ü®‚ü®‚ü©, j, g‚ü©,
        dsimp at *,
        dsimp at this,
        have := this _,


      end }  )
  _

variable {C}

structure corepresentation :=
( corepr : C )
( unit : F.obj corepr )
( extend : Œ† {X : C}, F.obj X ‚Üí (corepr ‚ü∂ X) )
( map_extend_unit {X : C} (f : F.obj X) : F.map (extend f) unit = f )
( unit_map_extend {X : C} (f : corepr ‚ü∂ X) : extend (F.map f unit) = f )

def hom_ext {R : corepresentation F} {X : C} {f g : R.corepr ‚ü∂ X}
  (h : F.map f R.unit = F.map g R.unit) : f = g :=
by rw [‚Üê R.unit_map_extend f, h, R.unit_map_extend]

example (R : corepresentation F) {X Y : C} (f : F.obj X) (g : X ‚ü∂ Y) :
  R.extend f ‚â´ g = R.extend (F.map g f) :=
hom_ext _ $ by simp [R.map_extend_unit]

def is_repr (R : corepresentation F) : (coyoneda.obj (op R.corepr)) ‚âÖ F :=
nat_iso.of_components
  (Œª X, { hom := Œª f, F.map f R.unit,
          inv := Œª f, R.extend f,
          hom_inv_id' := by funext x; simp [R.unit_map_extend],
          inv_hom_id' := by funext x; simp [R.map_extend_unit] })
  begin
    intros X Y f,
    funext x,
    simp
  end

structure corepresentation2 :=
( corepr : C )
( unit : F.obj corepr )
( extend : Œ† {X : C}, F.obj X ‚Üí (corepr ‚ü∂ X) )
( map_extend_unit {X : C} (f : F.obj X) : F.map (extend f) unit = f )
( extend_unit : extend unit = ùüô corepr )
( extend_comp {X Y : C} (f : F.obj X) (g : X ‚ü∂ Y) : extend f ‚â´ g = extend (F.map g f) )

example (R : corepresentation2 F) : corepresentation F :=
{ unit_map_extend := begin
    intros X f,
    rw [‚Üê R.extend_comp, R.extend_unit, category.id_comp],
  end
  ..R }

structure representation2 :=
( repr : C )
( counit : G.obj (op repr) )
( restrict : Œ† {X : C}, G.obj (op X) ‚Üí (X ‚ü∂ repr ) )
( map_restrict_counit {X : C} (f : G.obj (op X)) : G.map ((restrict f).op) counit = f )
( restrict_counit : restrict counit = ùüô repr )
( comp_restrict {X Y : C} (f : G.obj (op X)) (g : Y ‚ü∂ X) : g ‚â´ restrict f = restrict (G.map g.op f) )

example (R : representation2 G) : corepresentation2 (presheaf_to_copresheaf G) :=
{ corepr := R.repr,
  unit := begin
    dsimp [presheaf_to_copresheaf],
    have := R.counit,

  end, }