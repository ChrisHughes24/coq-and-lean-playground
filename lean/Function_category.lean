import category_theory.limits.shapes.pullbacks
import category_theory.limits.shapes.types

namespace category_theory

open limits category_theory.limits.types

@[protect_proj] structure Function : Type 1 :=
( to_fun : Type ‚Üí Type )
( R : Œ† {X‚ÇÅ X‚ÇÇ}, (X‚ÇÅ ‚Üí X‚ÇÇ ‚Üí Prop) ‚Üí to_fun X‚ÇÅ ‚Üí to_fun X‚ÇÇ ‚Üí Prop )

namespace Function

instance : has_coe_to_fun Function (Œª _, Type ‚Üí Type) :=
{ coe := Function.to_fun }

@[simp] lemma coe_mk (f h) : ‚áë(Function.mk f h) = f := rfl

structure hom (F G : Function) : Type 1 :=
( to_fun : Œ† {X}, F X ‚Üí G X )
( parametric : ‚àÄ {X‚ÇÅ X‚ÇÇ} {R : X‚ÇÅ ‚Üí X‚ÇÇ ‚Üí Prop} {x‚ÇÅ : F X‚ÇÅ} {x‚ÇÇ : F X‚ÇÇ}, 
    F.R R x‚ÇÅ x‚ÇÇ ‚Üí G.R R (to_fun x‚ÇÅ) (to_fun x‚ÇÇ) )

instance : category_struct Function :=
{ hom := Œª F G, hom F G,
  id := Œª F, ‚ü®Œª _, id, Œª _ _ _ _ _, id‚ü©,
  comp := Œª X Y Z n‚ÇÅ n‚ÇÇ, ‚ü®Œª X x, n‚ÇÇ.1 (n‚ÇÅ.1 x), Œª X‚ÇÅ X‚ÇÇ R x‚ÇÅ x‚ÇÇ h, n‚ÇÇ.2 (n‚ÇÅ.2 h)‚ü© } 

instance (F G : Function) : has_coe_to_fun (F ‚ü∂ G) (Œª _, Œ† {X}, F X ‚Üí G X) :=
{ coe := hom.to_fun }

lemma hom.ext_iff' {F G : Function} {f g : F ‚ü∂ G} :
  f = g ‚Üî (@coe_fn _ _ _ f : Œ† {X : Type}, F X ‚Üí G X) = coe_fn g := 
by cases f; cases g; simp [hom.mk.inj_eq]; refl

lemma hom.ext_iff {F G : Function} {f g : F ‚ü∂ G} :
  f = g ‚Üî ‚àÄ {X : Type} (x : F X), f x = g x :=
by simp [hom.ext_iff', function.funext_iff]

@[ext] lemma hom.ext {F G : Function} {f g : F ‚ü∂ G}
  (h : ‚àÄ (X : Type) (x : F X), f x = g x) : f = g :=
hom.ext_iff.2 h

@[simp] lemma coe_id (F : Function)  : 
  (coe_fn (ùüô F) : Œ† (X : Type), F X ‚Üí F X) = (Œª {X : Type}, @id (F X)) := rfl

@[simp] lemma coe_comp (F G H : Function) (f : F ‚ü∂ G) (g : G ‚ü∂ H) :
  coe_fn (f ‚â´ g) = (Œª {X : Type} (x : F X), g (f x)) := rfl

instance : category Function := {}

def app (X : Type) : Function ‚•§ Type :=
{ obj := Œª F, F X,
  map := Œª F G f a, f a } 

instance : has_pullbacks Function := 
@has_pullbacks_of_has_limit_cospan _ _ 
(Œª (F G H : Function) f g, ‚ü®‚ü®
{ cone := ‚ü®{ to_fun := Œª X, pullback_obj ((app X).map f) ((app X).map g),
             R := Œª X‚ÇÅ X‚ÇÇ R x y, F.R R x.1.1 y.1.1 ‚àß G.R R x.1.2 y.1.2 },
    ‚ü®Œª X, ‚ü®Œª Y, option.cases_on X (Œª x, f x.1.1) 
        (Œª X, limits.walking_pair.cases_on X (Œª x, x.1.1) (Œª x, x.1.2)), 
      begin 
        intros X‚ÇÅ X‚ÇÇ R x y,
        cases X,
        { exact Œª h, f.2 h.1 },
        { cases X, 
          exact and.left,
          exact and.right }
      end‚ü©, begin 
        intros X Y f, 
        cases f with f‚ÇÅ f‚ÇÇ,
        cases X,
        { refl },
        { cases X; refl },
        { cases f‚ÇÇ,
          { refl },
          { ext Z x,
            rcases x with ‚ü®‚ü®x‚ÇÅ, x‚ÇÇ‚ü©, hx‚ü©,
            exact hx } }     
      end‚ü©‚ü©,
  is_limit :=
    ‚ü®Œª s, 
      ‚ü®Œª X x, ‚ü®‚ü®s.œÄ.app limits.walking_span.left x, 
                s.œÄ.app limits.walking_span.right x‚ü©, 
          (congr_fun (congr_fun (hom.ext_iff'.1 (s.2.2 limits.walking_cospan.hom.inl)) X) x).symm.trans 
          (congr_fun (congr_fun (hom.ext_iff'.1 (s.2.2 limits.walking_cospan.hom.inr)) X) x)‚ü©,
      Œª X‚ÇÅ X‚ÇÇ R x‚ÇÅ x‚ÇÇ h,  ‚ü®(s.2.1 walking_span.left).2 h,
          (s.2.1 walking_span.right).2 h‚ü©‚ü©, 
    begin
      intros s j,
      cases j,
      { have := s.2.2 (limits.walking_cospan.hom.inl),
        dsimp at this,
        rw [category.id_comp] at this,
        refine eq.trans _ this.symm,
        refl },
      { cases j; ext; refl }
    end, 
    begin 
      intros s m hm,
      ext,
      { have := hm limits.walking_span.left,
        simp only [hom.ext_iff] at this,
        exact this _ },
      { have := hm limits.walking_span.right,
        simp only [hom.ext_iff] at this,
        exact this _ }
    end‚ü© } ‚ü©‚ü©)

end Function

end category_theory